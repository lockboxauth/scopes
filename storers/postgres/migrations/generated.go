// Code generated by go-bindata.
// sources:
// sql/scopes_20180309_1_init.sql
// sql/scopes_20180309_2_id.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlScopes_20180309_1_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xcd\x4a\xc4\x30\x14\x40\xe1\x75\xef\x53\xdc\xdd\xcc\xe0\xcc\x4a\x70\x33\xab\x4c\x1b\x51\x8c\x4d\x09\xa9\x50\x44\x4a\x49\x6f\x25\x10\x9b\xd0\xa4\xfe\xbc\xbd\x1b\x23\x8a\xe0\xec\x3f\xce\xe2\x1c\x0e\x78\xf1\x62\x9f\x97\x21\x11\xb6\x01\x4a\xc5\x99\xe6\xa8\xd9\x49\x70\x8c\xc6\x07\x8a\xb8\x85\xc2\x8e\xf8\xc0\x54\x79\xc3\xd4\xf6\xf2\x6a\x87\x8d\xba\xbd\x67\xaa\xc3\x3b\xde\xed\xa1\x58\x23\x2d\x7d\xf0\xce\x9a\x8f\xac\xb0\x96\x1a\xeb\x56\x08\xac\xf8\x35\x6b\x85\xc6\xcd\x26\x4b\x7a\x37\x14\x92\xf5\x73\xcc\xfa\xf1\xe9\xdb\xef\xa1\x30\xce\xd2\x9c\x72\xf0\xf5\xdf\xe0\x97\x3d\x97\xb4\xb1\x1f\x69\x1a\x56\x97\xf0\x24\xa5\xe0\xac\xfe\xdb\x9b\x06\x17\x09\x76\x47\x80\x9f\x4b\x2a\xff\x36\x43\xa5\x64\xf3\x6b\xc9\x11\x3e\x03\x00\x00\xff\xff\xdc\x31\x42\x04\x37\x01\x00\x00")

func sqlScopes_20180309_1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlScopes_20180309_1_initSql,
		"sql/scopes_20180309_1_init.sql",
	)
}

func sqlScopes_20180309_1_initSql() (*asset, error) {
	bytes, err := sqlScopes_20180309_1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/scopes_20180309_1_init.sql", size: 311, mode: os.FileMode(436), modTime: time.Unix(1520594897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlScopes_20180309_2_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4e\xce\x2f\x48\x2d\x56\x80\x08\x39\xfb\xfb\x84\xfa\xfa\x29\x64\xa6\x28\x84\x44\x06\xb8\x2a\x84\x39\x06\x39\x7b\x38\x06\x59\x73\x71\x21\x1b\xe0\x92\x5f\x9e\x47\xaa\x11\x1a\xc6\x66\x9a\xd6\x5c\x80\x00\x00\x00\xff\xff\x5a\xa0\xf4\x75\x87\x00\x00\x00")

func sqlScopes_20180309_2_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlScopes_20180309_2_idSql,
		"sql/scopes_20180309_2_id.sql",
	)
}

func sqlScopes_20180309_2_idSql() (*asset, error) {
	bytes, err := sqlScopes_20180309_2_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/scopes_20180309_2_id.sql", size: 135, mode: os.FileMode(436), modTime: time.Unix(1520595009, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/scopes_20180309_1_init.sql": sqlScopes_20180309_1_initSql,
	"sql/scopes_20180309_2_id.sql": sqlScopes_20180309_2_idSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"scopes_20180309_1_init.sql": &bintree{sqlScopes_20180309_1_initSql, map[string]*bintree{}},
		"scopes_20180309_2_id.sql": &bintree{sqlScopes_20180309_2_idSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

